package it342.g4.e_vents.service;

import it342.g4.e_vents.model.User;
import it342.g4.e_vents.repository.UserRepository;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UserService {
    
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    
    @Autowired
    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    /**
     * Retrieves all users from the database
     * @return List of all users
     */
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    /**
     * Retrieves a user by their ID
     * @param id The user ID to look up
     * @return Optional containing the user if found
     */
    public Optional<User> getUser(Long id) {
        return userRepository.findById(id);
    }

    /**
     * Registers a new user with encrypted password and default role
     * @param user The user to register
     * @return The registered user with ID
     * @throws RuntimeException if user already exists or default role not found
     */
    public User registerUser(User user) {
        if (userRepository.existsByEmail(user.getEmail())) {
            throw new RuntimeException("Error: User already exists");
        }

        user.setRole("USER"); // Default role
        user.setActive(true); // Set user as active by default
        // Encrypt the password before saving
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user);
    }

    /**
     * Authenticates a user by email and password
     * @param email The user's email
     * @param password The user's password (plain text)
     * @return The authenticated user
     * @throws RuntimeException if user not found or password invalid
     */
    public User login(String email, String password) {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Error: User not found"));

        if (!passwordEncoder.matches(password, user.getPassword())) {
            throw new RuntimeException("Invalid password");
        }

        return user;
    }

    /**
     * Updates an existing user
     * @param user The user with updated fields
     * @return The updated user
     */
    public User editUser(User user) {
        return userRepository.save(user);
    }
    
    /**
     * Soft deletes a user by setting their is_active attribute to false
     * @param userId The ID of the user to soft delete
     * @return The updated User object
     * @throws EntityNotFoundException if the user is not found
     */
    public User softDeleteUser(Long userId) {
        return updateUserActiveStatus(userId, false);
    }
    
    /**
     * Restores a previously soft-deleted user by setting their is_active attribute back to true
     * @param userId The ID of the user to restore
     * @return The updated User object
     * @throws EntityNotFoundException if the user is not found
     */
    public User restoreUser(Long userId) {
        return updateUserActiveStatus(userId, true);
    }
    
    /**
     * Checks if a user with the given email exists
     * @param email The email to check
     * @return true if user exists, false otherwise
     */
    public boolean userExists(String email) {
        return userRepository.existsByEmail(email);
    }

    /**
     * Changes a user's password by email
     * @param email The email of the user
     * @param newPassword The new password (plain text)
     * @return true if password changed successfully, false if user not found
     */
    public boolean changePasswordByEmail(String email, String newPassword) {
        return userRepository.findByEmail(email)
                .map(user -> {
                    user.setPassword(passwordEncoder.encode(newPassword));
                    userRepository.save(user);
                    return true;
                })
                .orElse(false);
    }
    
    /**
     * Helper method to update a user's active status
     * @param userId The ID of the user to update
     * @param activeStatus The new active status
     * @return The updated User object
     * @throws EntityNotFoundException if the user is not found
     */
    private User updateUserActiveStatus(Long userId, boolean activeStatus) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new EntityNotFoundException("User not found with ID: " + userId));
        
        user.setActive(activeStatus);
        return userRepository.save(user);
    }
    
    /**
     * Counts all users in the system
     * @return The total number of users
     */
    public long countAllUsers() {
        return userRepository.count();
    }
    
    /**
     * Permanently deletes a user from the database
     * @param userId The ID of the user to delete
     * @throws EntityNotFoundException if the user is not found
     */
    public void permanentlyDeleteUser(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new EntityNotFoundException("User not found with ID: " + userId));
        
        userRepository.delete(user);
    }
    
    /**
     * Gets the most recently registered users
     * @param limit The maximum number of users to return
     * @return List of recent users
     */
    public List<User> getRecentUsers(int limit) {
        // This is a simple implementation that returns the first N users
        // In a real application, you would order by registration date
        return userRepository.findAll().stream()
                .limit(limit)
                .toList();
    }
}
