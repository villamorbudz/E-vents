package it342.g4.e_vents.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import it342.g4.e_vents.model.Act;
import it342.g4.e_vents.model.Event;
import it342.g4.e_vents.service.ActService;
import it342.g4.e_vents.service.EventService;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.MediaType;

import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * Controller for event-related operations
 */
@RestController
@RequestMapping("/api/events")
@CrossOrigin(origins = "*")
@Tag(name = "Event", description = "Event management APIs")
public class EventController {

    private final EventService eventService;
    private final ActService actService;
    private final Path bannerStorageLocation;
    
    @Autowired
    public EventController(EventService eventService, ActService actService) {
        this.eventService = eventService;
        this.actService = actService;
        this.bannerStorageLocation = Paths.get("uploads/banners").toAbsolutePath().normalize();
        
        // Create directory if it doesn't exist
        try {
            Files.createDirectories(this.bannerStorageLocation);
        } catch (IOException ex) {
            throw new RuntimeException("Could not create the directory where banners will be stored.", ex);
        }
    }
    
    /**
     * Retrieves all events
     * @return List of all events
     */
    @GetMapping()
    @Operation(summary = "Get all events", description = "Retrieves a list of all events in the system")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Successfully retrieved list of events", 
                     content = @Content(mediaType = "application/json", schema = @Schema(implementation = Event.class)))
    })
    public ResponseEntity<List<Event>> getAllEvents() {
        return ResponseEntity.ok(eventService.getAllEvents());
    }
    
    /**
     * Retrieves all scheduled events
     * @return List of all scheduled events
     */
    @GetMapping("/scheduled")
    @Operation(summary = "Get all scheduled events", description = "Retrieves a list of all events with SCHEDULED status")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Successfully retrieved list of scheduled events", 
                     content = @Content(mediaType = "application/json", schema = @Schema(implementation = Event.class)))
    })
    public ResponseEntity<List<Event>> getScheduledEvents() {
        return ResponseEntity.ok(eventService.getEventsByStatus("SCHEDULED"));
    }
    
    /**
     * Retrieves all postponed events
     * @return List of all postponed events
     */
    @GetMapping("/postponed")
    @Operation(summary = "Get all postponed events", description = "Retrieves a list of all events with POSTPONED status")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Successfully retrieved list of postponed events", 
                     content = @Content(mediaType = "application/json", schema = @Schema(implementation = Event.class)))
    })
    public ResponseEntity<List<Event>> getPostponedEvents() {
        return ResponseEntity.ok(eventService.getEventsByStatus("POSTPONED"));
    }
    
    /**
     * Retrieves all cancelled events
     * @return List of all cancelled events
     */
    @GetMapping("/cancelled")
    @Operation(summary = "Get all cancelled events", description = "Retrieves a list of all events with CANCELLED status")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Successfully retrieved list of cancelled events", 
                     content = @Content(mediaType = "application/json", schema = @Schema(implementation = Event.class)))
    })
    public ResponseEntity<List<Event>> getCancelledEvents() {
        return ResponseEntity.ok(eventService.getEventsByStatus("CANCELLED"));
    }
    
    /**
     * Retrieves an event by ID
     * @param id The event ID
     * @return The event or 404 if not found
     */
    @GetMapping("/{id}")
    @Operation(summary = "Get event by ID", description = "Retrieves a specific event by its ID")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Successfully retrieved the event", 
                     content = @Content(mediaType = "application/json", schema = @Schema(implementation = Event.class))),
        @ApiResponse(responseCode = "404", description = "Event not found", content = @Content)
    })
    public ResponseEntity<Event> getEventById(
            @Parameter(description = "ID of the event to retrieve") @PathVariable Long id) {
        try {
            return ResponseEntity.ok(eventService.getEventById(id));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }
    
    /**
     * Shows the edit event page
     * @param id The event ID to edit
     * @return ModelAndView for the edit page
     */
    @GetMapping("/edit/{id}")
    @Operation(summary = "Show edit event page", description = "Returns a view for editing an event")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Successfully returned edit page view")
    })
    public ModelAndView showEditEventPage(
            @Parameter(description = "ID of the event to edit") @PathVariable Long id) {
        ModelAndView mav = new ModelAndView("edit_event");
        mav.addObject("eventId", id);
        return mav;
    }

    /**
     * Retrieves all acts
     * @return List of all acts
     */
    @GetMapping("/acts")
    @Operation(summary = "Get all acts", description = "Retrieves a list of all acts for event lineup selection")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Successfully retrieved list of acts", 
                     content = @Content(mediaType = "application/json", schema = @Schema(implementation = Act.class)))
    })
    public ResponseEntity<List<Act>> getActs() {
        return ResponseEntity.ok(actService.getAllActs());
    }

    /**
     * Creates a new event with form data
     * @param name Event name
     * @param date Event date
     * @param time Event time
     * @param lineup List of Act IDs
     * @param status Event status
     * @return Redirect to dashboard
     */
    @PostMapping("/create-form")
    @Operation(summary = "Create event with form data", description = "Creates a new event using form data and redirects to dashboard")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Event successfully created and redirected to dashboard"),
        @ApiResponse(responseCode = "400", description = "Invalid input", content = @Content)
    })
    public ModelAndView createEventForm(
            @Parameter(description = "Name of the event", required = true) @RequestParam String name,
            @Parameter(description = "Date of the event", required = true) @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
            @Parameter(description = "Time of the event", required = true) @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.TIME) LocalTime time,
            @Parameter(description = "IDs of acts in the lineup", required = true) @RequestParam(value = "lineup") List<Long> lineup,
            @Parameter(description = "Status of the event", required = true) @RequestParam String status) {
        Event event = new Event();
        event.setName(name);
        event.setDate(date);
        event.setTime(time);
        
        // Find acts by IDs
        List<Act> acts = actService.getAllActs().stream()
                .filter(a -> lineup.contains(a.getActId()))
                .toList();
        event.setLineup(acts);
        
        event.setStatus(status);
        eventService.createEvent(event);
        return new ModelAndView("redirect:/events/dashboard");
    }
    
    /**
     * Creates a new event with JSON data
     * @param event Event data from request body
     * @return The created event
     */
    @PostMapping("/create")
    @Operation(summary = "Create a new event", description = "Creates a new event in the system using JSON data")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "Event successfully created", 
                     content = @Content(mediaType = "application/json", schema = @Schema(implementation = Event.class))),
        @ApiResponse(responseCode = "400", description = "Invalid input", content = @Content)
    })
    public ResponseEntity<Event> createEvent(
            @Parameter(description = "Event object to be created", required = true) @RequestBody Event event) {
        try {
            Event createdEvent = eventService.createEvent(event);
            return ResponseEntity.status(HttpStatus.CREATED).body(createdEvent);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Updates an existing event
     * @param id The event ID to update
     * @param eventDetails Updated event data
     * @return Success message or error
     */
    @PutMapping("/{id}")
    @Operation(summary = "Update an event", description = "Updates an existing event by its ID")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Event successfully updated", 
                     content = @Content(mediaType = "application/json", schema = @Schema(implementation = Event.class))),
        @ApiResponse(responseCode = "400", description = "Invalid input", content = @Content),
        @ApiResponse(responseCode = "404", description = "Event not found", content = @Content)
    })
    public ResponseEntity<Event> updateEvent(
            @Parameter(description = "ID of the event to update", required = true) @PathVariable Long id, 
            @Parameter(description = "Updated event details", required = true) @RequestBody Event eventDetails) {
        try {
            // Verify event exists
            Event existingEvent = eventService.getEventById(id);
            
            // Update fields
            existingEvent.setName(eventDetails.getName());
            existingEvent.setDate(eventDetails.getDate());
            existingEvent.setTime(eventDetails.getTime());
            existingEvent.setLineup(eventDetails.getLineup());
            existingEvent.setStatus(eventDetails.getStatus());
            
            // Save and return
            Event updatedEvent = eventService.updateEvent(existingEvent);
            return ResponseEntity.ok(updatedEvent);
        } catch (EntityNotFoundException e) {
            return ResponseEntity.notFound().build();
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Permanently deletes an event from the database
     * @param id The event ID to delete
     * @return Success message or error
     */
    @DeleteMapping("/{id}/delete")
    @Operation(summary = "Delete an event permanently", description = "Permanently deletes an event from the system")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Event permanently deleted", 
                     content = @Content(mediaType = "application/json")),
        @ApiResponse(responseCode = "404", description = "Event not found", content = @Content),
        @ApiResponse(responseCode = "400", description = "Bad request", content = @Content)
    })
    public ResponseEntity<?> deleteEventPermanently(
            @Parameter(description = "ID of the event to permanently delete", required = true) @PathVariable Long id) {
        try {
            eventService.deleteEvent(id);
            return ResponseEntity.ok(Collections.singletonMap("message", "Event permanently deleted"));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Collections.singletonMap("error", e.getMessage()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Collections.singletonMap("error", e.getMessage()));
        }
    }

    /**
     * Restores a cancelled or postponed event
     * @param id The event ID to restore
     * @return Success message or error
     */
    @PostMapping("/restore/{id}")
    @Operation(summary = "Restore an event", description = "Restores a cancelled or postponed event to SCHEDULED status")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Event successfully restored", 
                     content = @Content(mediaType = "application/json")),
        @ApiResponse(responseCode = "404", description = "Event not found", content = @Content),
        @ApiResponse(responseCode = "400", description = "Bad request", content = @Content)
    })
    public ResponseEntity<?> restoreEvent(
            @Parameter(description = "ID of the event to restore", required = true) @PathVariable Long id) {
        try {
            eventService.restoreEvent(id);
            return ResponseEntity.ok(Collections.singletonMap("message", "Event restored successfully"));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Collections.singletonMap("error", e.getMessage()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Collections.singletonMap("error", e.getMessage()));
        }
    }
    
    /**
     * Cancels an event by setting its status to CANCELLED
     * @param id The event ID to cancel
     * @return Success message or error
     */
    @DeleteMapping("/{id}/cancel")
    @Operation(summary = "Cancel an event", description = "Cancels an event by setting its status to CANCELLED")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Event successfully cancelled", 
                     content = @Content(mediaType = "application/json")),
        @ApiResponse(responseCode = "404", description = "Event not found", content = @Content),
        @ApiResponse(responseCode = "400", description = "Bad request", content = @Content)
    })
    public ResponseEntity<?> cancelEvent(
            @Parameter(description = "ID of the event to cancel", required = true) @PathVariable Long id) {
        try {
            eventService.cancelEvent(id);
            return ResponseEntity.ok(Collections.singletonMap("message", "Event cancelled successfully"));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Collections.singletonMap("error", e.getMessage()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Collections.singletonMap("error", e.getMessage()));
        }
    }
    
    /**
     * Postpones an event by setting its status to POSTPONED
     * @param id The event ID to postpone
     * @return Success message or error
     */
    @PutMapping("/{id}/postpone")
    @Operation(summary = "Postpone an event", description = "Postpones an event by setting its status to POSTPONED")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Event successfully postponed", 
                     content = @Content(mediaType = "application/json")),
        @ApiResponse(responseCode = "404", description = "Event not found", content = @Content),
        @ApiResponse(responseCode = "400", description = "Bad request", content = @Content)
    })
    public ResponseEntity<?> postponeEvent(
            @Parameter(description = "ID of the event to postpone", required = true) @PathVariable Long id) {
        try {
            eventService.postponeEvent(id);
            return ResponseEntity.ok(Collections.singletonMap("message", "Event postponed successfully"));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Collections.singletonMap("error", e.getMessage()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Collections.singletonMap("error", e.getMessage()));
        }
    }
    
    /**
     * Uploads a banner image for an event
     * @param id The event ID
     * @param file The image file to upload
     * @return Success message or error
     */
    @PostMapping("/{id}/banner")
    @Operation(summary = "Upload event banner", description = "Uploads a banner image for an event")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Banner successfully uploaded", 
                     content = @Content(mediaType = "application/json")),
        @ApiResponse(responseCode = "404", description = "Event not found", content = @Content),
        @ApiResponse(responseCode = "400", description = "Invalid file or bad request", content = @Content)
    })
    public ResponseEntity<?> uploadBanner(
            @Parameter(description = "ID of the event", required = true) @PathVariable Long id, 
            @Parameter(description = "Banner image file", required = true) @RequestParam("file") MultipartFile file) {
        try {
            // Verify event exists
            Event event = eventService.getEventById(id);
            
            // Generate unique filename
            String fileExtension = getFileExtension(file.getOriginalFilename());
            String fileName = UUID.randomUUID().toString() + fileExtension;
            
            // Save file
            Path targetLocation = this.bannerStorageLocation.resolve(fileName);
            Files.copy(file.getInputStream(), targetLocation);
            
            // Update event with banner path
            event.setBannerImage(fileName);
            eventService.updateEvent(event);
            
            return ResponseEntity.ok(Collections.singletonMap("message", "Banner uploaded successfully"));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Collections.singletonMap("error", e.getMessage()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Collections.singletonMap("error", e.getMessage()));
        }
    }
    
    /**
     * Deletes the banner image for an event
     * @param id The event ID
     * @return Success message or error
     */
    @DeleteMapping("/{id}/banner")
    @Operation(summary = "Delete event banner", description = "Deletes the banner image for an event")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Banner successfully deleted", 
                     content = @Content(mediaType = "application/json")),
        @ApiResponse(responseCode = "404", description = "Event not found", content = @Content),
        @ApiResponse(responseCode = "400", description = "Bad request", content = @Content)
    })
    public ResponseEntity<?> deleteBanner(
            @Parameter(description = "ID of the event", required = true) @PathVariable Long id) {
        try {
            // Verify event exists
            Event event = eventService.getEventById(id);
            
            // Delete file if exists
            if (event.getBannerImage() != null && !event.getBannerImage().isEmpty()) {
                Path filePath = this.bannerStorageLocation.resolve(event.getBannerImage()).normalize();
                Files.deleteIfExists(filePath);
                
                // Update event
                event.setBannerImage(null);
                eventService.updateEvent(event);
            }
            
            return ResponseEntity.ok(Collections.singletonMap("message", "Banner deleted successfully"));
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Collections.singletonMap("error", e.getMessage()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Collections.singletonMap("error", e.getMessage()));
        }
    }
    
    /**
     * Serves image files from the file system
     * @param filename The image filename
     * @return The image file
     */
    @GetMapping("/images/{filename:.+}")
    @Operation(summary = "Serve event banner image", description = "Serves the banner image file for an event")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Successfully retrieved the image"),
        @ApiResponse(responseCode = "404", description = "Image not found", content = @Content),
        @ApiResponse(responseCode = "400", description = "Bad request", content = @Content)
    })
    public ResponseEntity<Resource> serveImage(
            @Parameter(description = "Filename of the image to retrieve", required = true) @PathVariable String filename) {
        try {
            Path filePath = this.bannerStorageLocation.resolve(filename).normalize();
            Resource resource = new UrlResource(filePath.toUri());
            
            if (resource.exists()) {
                return ResponseEntity.ok()
                        .contentType(MediaType.IMAGE_JPEG)
                        .body(resource);
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (MalformedURLException e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Helper method to extract file extension
     */
    private String getFileExtension(String filename) {
        if (filename == null) {
            return "";
        }
        int lastIndexOf = filename.lastIndexOf(".");
        if (lastIndexOf == -1) {
            return "";
        }
        return filename.substring(lastIndexOf);
    }
}
